#!/usr/bin/env bash
#
#  modem gps service on solid sense status request
#

# Global variables
PROG_NAME="$(basename "${0}")"
MDM_DIR=/opt/SolidSense/modem_gps

# functions

usage () {
	echo "${PROG_NAME}:"
	echo "    -h|--help                     :display this help"
	echo "    -l|--list                     :list available networks"
	echo "    -t|--test                     :test the modem and attachment (as sudo), up to 2 optional arguments"
	echo "    -n|--network                  :select an network"
	echo "    -r|--rat                      :select a RAT (GSM/UTRAN/LTE)"
	echo "    -R|--reset                    :reset the modem (as sudo)"
	echo "    -F|--factory_reset            :reset the modem to factory default(as sudo)"
	echo "    -c|--check                    :check modem presence (as sudo)"
	echo "    no arguments                  :print the modem status"
	exit 1
}

reset () {
	echo " Resetting the modem, all communication will stop"
	sudo systemctl stop modem_gps
	sudo python3 ${MDM_DIR}/Factory_Reset.py
	echo "Wait 30 seconds before performing further actions. Power cycle recommended"
}

factory_reset() {
	echo " Resetting the modem to factory default, all communication will stop"
	sudo systemctl stop modem_gps
	sudo python3 ${MDM_DIR}/Factory_Reset.py FULL
	echo "Wait 30 seconds before performing further actions. Power cycle recommended"
}

check () {
	if [ -e /dev/ttyUSB2 ] ; then
		echo "Modem control file present"
		sudo systemctl stop modem_gps
		sudo python3 ${MDM_DIR}/Test_Modem.py
		return 0
	else
		echo "No Modem control file detected"
		lsusb
		return 1
	fi
}

COMMAND="status"
NETWORK=""
RAT=""
OPT1=""
OPT2=""
TEST_MODEM=1

while (( "$#" ))
do
	case "${1}" in
		-h|--help )
			usage
			;;
		-l|--list )
			COMMAND="operator"
			shift
			;;
		-n|--network )
			NETWORK="${2}"
			shift 2
			;;
		-r|--rat )
			RAT="${2}"
			shift 2
			;;
		-c|--check )
			shift
			check
			exit
			;;
		-t|--test )
			shift
			TEST_MODEM=0
			;;
		-R|--reset )
			shift
			reset
			exit
			;;
		-F|--factory_reset )
			shift
			factory_reset
			exit
			;;
		-- )
			shift
			break
			;;
		--*=|-* )
			echo "Error: Unsupported flag ${1}" >&2
			usage
			exit 1
			;;
		* )
			if [ -z "${PARAMS}" ]; then
				PARAMS="${1}"
			else
				PARAMS="${PARAMS} ${1}"
			fi
			shift
			;;
	esac
done

if [ -n "${NETWORK}" ]; then
	COMMAND="operator"
	OPT1=${NETWORK}
fi
if [ -n "${RAT}" ]; then
	if [ -z "${NETWORK}" ]; then
		COMMAND="operator"
		OPT1="CURRENT"
		OPT2=${RAT}
	else
		OPT2=${RAT}
	fi
fi

if [ ${TEST_MODEM} -eq 0 ]; then
	echo "Testing the modem - service will stop"
	sudo systemctl stop modem_gps

	if [ -z "${PARAMS}" ]; then
		python3 ${MDM_DIR}/Test_Modem.py
	else
		if [ $# -gt 2 ]; then
			echo "More than 2 optional arguments for '--test'"
			usage
			exit 1
		fi
		echo "Test additional parameters:${PARAMS}"
		python3 ${MDM_DIR}/Test_Modem.py ${PARAMS}
	fi

	echo "To restart the restart if test is ok: sudo systemctl start modem_gps"
else
	python3 ${MDM_DIR}/Modem_Service_Client.py 127.0.0.1:20231 ${COMMAND} ${OPT1} "${OPT2}"
fi
