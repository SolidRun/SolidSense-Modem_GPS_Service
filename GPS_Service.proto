//
// gRPC definition for GPS Service
//
//	Copyright Laurent Carr√© - Sterwen Technology 2019
//
syntax="proto3";
message GPS_Position {
	// message with the static position
	bool fix=1;// True if GPS is fixed, if false all other fields are irrelevant
	string gps_time=2;	// UTC time of the position
	float	latitude=3;	// latitude in decimal degree +north -south
	float	longitude=4; // longitude in decimal degree + east - west
	float	altitude=5;	 // in meter above sea level. No always present
	}

message GPS_Vector {
	// message with start position (2D) and moving vector
	bool fix=1;// True if GPS is fixed, if false all other fields are irrelevant
	string gps_time=2;	// UTC time of the position
	float	latitude=3;	// latitude in decimal degree +north -south
	float	longitude=4; // longitude in decimal degree + east - west
	float	altitude=7;	 // altitude in meters
	float	COG=5;		// Cape on Ground in decimal degree
	float	SOG=6;		// Speed on ground in knots
	}

message GPS_Precision {
	// additional precision information on the GPS
	uint32 frameID= 10;
	bool fix=1;		// True if GPS is fixed, if false all other fields are irrelevant
	uint32 nbsat=2; // Number of sattelites in the fix
	string gps_time=3;	// UTC time
	string date=4;		// date
	repeated uint32 sat_num=5;	// List of the satellites numbers seen in fix
	float hdop = 6;		// Horizontal dilution of precision
	}

message PositionSpec {
enum PositionSpecDef {
	P2D= 0;		// Position 2D only
	P3D= 1;		// Position 3D (send altitude if possible)
	Best= 2;	// Best possible position
	}
	PositionSpecDef spec=1;
	}


message ModemCmd {
	string command=1;
	}
	

message ModemStatus {
	string model=1;
	string IMEI=2;
	bool gps_on=3;
	string SIM_status = 4;
	string IMSI=5;
	string ICCID=17;
	bool registered=6;
	string network_reg=7;
	uint32 PLMNID=8;
	string network_name=9;
	string network=10;
	uint32 lac=15;
	uint32 ci=16;
	string rat=11;
	string band=12;
	sint32 rssi=13;
	string operators=14;
	}
	
message ModemResp {
	uint32 frameID=1;
	string response=2;
	ModemStatus status = 3;
	}
service GPS_Service {
	rpc getPosition(PositionSpec) returns (GPS_Position) {}
	rpc getVector(PositionSpec) returns (GPS_Vector) {}
	rpc getPrecision(PositionSpec) returns(GPS_Precision) {}
	rpc streamGPS(ModemCmd) returns (stream GPS_Vector) {}
	rpc stopStream(ModemCmd) returns (ModemResp) {}
	rpc modemCommand(ModemCmd) returns(ModemResp){}
	}
	
